<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mrrobot97&#39;s blog</title>
    <description>Record my study in android.</description>
    <link>http://mrrobot97.github.io/</link>
    <atom:link href="http://mrrobot97.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Nov 2016 23:29:55 +0800</pubDate>
    <lastBuildDate>Sun, 20 Nov 2016 23:29:55 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Dribbble第三方开源客户端Designer</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Dribbble是一个优秀的设计师网站，这里有上万优秀设计师为移动开发人员提供了海量精美的UI资源。Dribbble很早就开放了API，也有许多优秀的第三方客户端，本着学习的目的，我在课余时间写了这个还很粗糙的客户端。目前的功能还很简陋，用户体验也不是很完善，主要是因为Dribbble的API服务器在国外，国内加载资源很慢。不过，我会慢慢更新的，一点一点把它变得更好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mrrobot97/Designer&quot;&gt;项目github地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先看一下预览图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/screener_20161029%2800_13_49%29.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/screener_20161028%2823_54_36%29.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/screener_20161029%2800_14_23%29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/screener_20161029%2800_15_02%29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/screener_20161029%2800_15_24%29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/screener_20161029%2800_15_39%29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主要使用的技术和开源项目:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.	MVP设计模式。
2.	RxJAVA
3.	Retrofit
4.	OkHttp
5.	Glide
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;feature:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.支持页面滑动返回
2.支持离线缓存浏览
3.支持JAVA 8
4.支持Oauth2.0认证登录
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;todo list：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;使用数据库离线缓存,节省客户端流量。&lt;/del&gt; (已使用OKHttp离线缓存代替)
    &lt;ol&gt;
      &lt;li&gt;使用palette动态改变背景色，增加美观性。&lt;/li&gt;
      &lt;li&gt;使用Dribbble提供的Oauth2认证允许用户登录，并对每个设计进行评论，点赞，收藏等功能。(已初步实现Oauth2.0认证登陆)&lt;/li&gt;
      &lt;li&gt;改善图片加载速度，提供友好的用户反馈。&lt;/li&gt;
      &lt;li&gt;发现并消灭BUG，提高软件使用的稳定性。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;欢迎fork、issue、star。&lt;/p&gt;

&lt;h1 id=&quot;changelog&quot;&gt;ChangeLog&lt;/h1&gt;

&lt;h2 id=&quot;version-011&quot;&gt;version 0.1.1&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.加入Oauth2.0登录入口，用户可以登录并查看自己的个人信息。
2.利用OKHttp加入离线缓存，没有网也可以愉快的玩耍了。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;version-011-apk-downloadhttpockr1qfi1bktclouddncomrelease011apk&quot;&gt;&lt;a href=&quot;http://ockr1qfi1.bkt.clouddn.com/release0.1.1.apk&quot;&gt;version 0.1.1 apk download&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;version-010-apk-downloadhttpockr1qfi1bktclouddncomdesignerapk&quot;&gt;&lt;a href=&quot;http://ockr1qfi1.bkt.clouddn.com/Designer.apk&quot;&gt;version 0.1.0 apk download&lt;/a&gt;&lt;/h2&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/11/05/Dribbble%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%AE%A2%E6%88%B7%E7%AB%AFDesigner.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/11/05/Dribbble%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%AE%A2%E6%88%B7%E7%AB%AFDesigner.html</guid>
        
        
      </item>
    
      <item>
        <title>使用MonkeyRunner进行Android应用自动化测试</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;MonkeyRunner是谷歌官方SDK tools 中为我们提供的一个程序自动化测试工具，需要开发者编写相应的python自动测试脚本，开发者可以自定义测试流程，功能很全面，可以模拟各种事件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;monkeyrunner位于SDK/tools/monkeyrunner,这是一个可执行脚本，我们编写自己的测试脚本然后用monkeyrunner运行即可。&lt;/p&gt;

&lt;p&gt;谷歌提供了一个python库com.android.monkeyrunner，便于我们编写测试脚本。看一个脚本demo:
monkeyrunner.py&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice, MonkeyImage


device = MonkeyRunner.waitForConnection()

package = &#39;me.mrrobot97.swipeback&#39;

activity = &#39;me.mrrobot97.swipeback.MainActivity&#39;

runComponent = package + &#39;/&#39; + activity

device.startActivity(component=runComponent)

MonkeyRunner.sleep(1)

for i in range(0, 5):
	device.touch(720, 1280, &#39;DOWN_AND_UP&#39;)
	MonkeyRunner.sleep(0.5)

for i in range(0, 5):
	device.drag((1, 1280), (720, 1280), 0.5, 50)
	MonkeyRunner.sleep(0.7)

img=device.takeSnapshot()

img.writeToFile(&#39;screen.png&#39;,&#39;png&#39;)

print &#39;finished&#39;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;三个module分别为MonkeyRunner,MonkeyDevice,MonkeyImage，每一个都包含了许多与APP交互的API，可以在网上查到相应的文档。&lt;/p&gt;

&lt;p&gt;终端运行:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; monkeyrunner monkeyrunner.py 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可在虚拟机或真机中观察到效果:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/auto-test.gif&quot; alt=&quot;Demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于MonkeyRunner具体的用法请上网查API文档。&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/10/16/%E4%BD%BF%E7%94%A8MonkeyRunner%E8%BF%9B%E8%A1%8CAndroid%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/10/16/%E4%BD%BF%E7%94%A8MonkeyRunner%E8%BF%9B%E8%A1%8CAndroid%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95.html</guid>
        
        
      </item>
    
      <item>
        <title>动手写一个高仿微信的滑动返回SwipeBackActivity</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文来源于&lt;a href=&quot;https://github.com/XBeats/and_swipeback&quot;&gt;这个开源项目&lt;/a&gt;，由于作者只给出了用法和基本原理，因此才有了本文的产生。本文去除了原项目中较琐碎和不必要的一些内容，只实现了基本的Activity滑动返回功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先看效果图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/swipebackdemo.gif&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;效果还是挺不错的。&lt;/p&gt;

&lt;p&gt;基本原理：利用Application类的registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks)方法，可以记录全局所有Activity的生命周期，因此我们可以利用这点来存储我们所有的Activity于一个栈中，每次滑动返回时从栈中取出前一个Activtity,然后分离出其中id为&lt;code class=&quot;highlighter-rouge&quot;&gt;Window.ID_ANDROID_CONTENT&lt;/code&gt;的FrameLayout，这个FrameLayout就是我们setContentView中的那个view的父view,利用这个FrameLayout就可以获取Activity界面显示的View。然后我们监听手势事件，在滑动的时候将前一个Activity的View加载进来并不断更改其偏移量即可。&lt;/p&gt;

&lt;p&gt;首先是实现ActivityLifecycleCallbacks接口，并在其中用一个栈存储我们所有的Activity:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ActivityLifeCycleHelper implements Application.ActivityLifecycleCallbacks {
    private Stack&amp;lt;Activity&amp;gt; mActivities;

    public ActivityLifeCycleHelper(){
        mActivities=new Stack&amp;lt;&amp;gt;();
    }

    @Override
    public void onActivityCreated(Activity activity, Bundle bundle) {
        mActivities.add(activity);
    }

    @Override
    public void onActivityStarted(Activity activity) {

    }

    @Override
    public void onActivityResumed(Activity activity) {

    }

    @Override
    public void onActivityPaused(Activity activity) {

    }

    @Override
    public void onActivityStopped(Activity activity) {

    }

    @Override
    public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {

    }

    @Override
    public void onActivityDestroyed(Activity activity) {
        mActivities.remove(activity);
    }

    public Activity getPreActivity(){
        int size=mActivities.size();
        if(size&amp;lt;2) return null;
        else return mActivities.get(size-2);
    }

    public void removeActivity(Activity activity){
        mActivities.remove(activity);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;看得出这个类很简单，只是在Activity创建的时候加入栈中，销毁的时候移除。
然后就是在Application中调用registerActivityLifecycleCallbacks()方法了:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyApplication extends Application {
    public ActivityLifeCycleHelper getHelper() {
        return mHelper;
    }

    private ActivityLifeCycleHelper mHelper;
    @Override
    public void onCreate() {
        super.onCreate();
        mHelper=new ActivityLifeCycleHelper();
        //store all the activities
        registerActivityLifecycleCallbacks(mHelper);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后定义一个最基本的SwipeBackActivity,当然要继承自AppCompactActivity，这个类我们要做的就是重写它的dispatchTouchEvent()方法，这是因为我们要监听边界滑动返回事件，肯定要拦截其中的一些触摸事件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SwipeBackActivity extends AppCompatActivity {
    private TouchHelepr mTouchHelepr;

    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        if(mTouchHelepr==null)
            mTouchHelepr=new TouchHelepr(getWindow());
        return super.dispatchTouchEvent(ev)&amp;amp;&amp;amp;mTouchHelepr.processTouchEvent(ev);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里有一个我们自己写的类TouchHelper，具体的逻辑操作就在这里面实现了。接下来就是重点类TouchHelper了。
首先我们定义三个状态:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	private boolean isIdle=true;
    private boolean isSlinding=false;
    private boolean isAnimating=false;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;isIdle,表示当前为静止状态。&lt;/li&gt;
  &lt;li&gt;isSliding,表示当前用户手指移动，我们的View随之滑动。&lt;/li&gt;
  &lt;li&gt;isAnimating，表示用户手指松开，View要么恢复原状，要么移动至最右并消失，这是一个Animation过程，isAnimating=true表示当前处于这种动画过程中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后是几个成员变量:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	private Window mWindow;
    private ViewGroup preContentView;
    private ViewGroup curContentView;
    private ViewGroup curView;
    private ViewGroup preView;
    private Activity preActivity; 
    
    //左边触发的宽度
    private int triggerWidth=50;
	//阴影宽度
    private int SHADOW_WIDTH=30;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;mWindow用于初始化TouchHelper，并且这个window就包含了context,activity等信息。&lt;/p&gt;

&lt;p&gt;curContentView、preContentView分别表示当前、前一个Activity中外层的FrameLayout。&lt;/p&gt;

&lt;p&gt;curView、preView分别表示当前、前一个Activity的界面View。&lt;/p&gt;

&lt;p&gt;然后就是处理手势的代码了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private Context getContext(){
        return mWindow.getContext();
    }

//决定是否拦截事件
    public boolean processTouchEvent(MotionEvent event){
        if(isAnimating) return true;
        float x=event.getRawX();
        switch (event.getAction()){
            case MotionEvent.ACTION_DOWN:
                if(x&amp;lt;=triggerWidth){
                    isIdle=false;
                    isSlinding=true;
                    startSlide();
                    return true;
                }
                break;
            case MotionEvent.ACTION_POINTER_DOWN:
                if(isSlinding) return true;
                break;
            case MotionEvent.ACTION_MOVE:
                if(isSlinding){
                    if(event.getActionIndex()!=0) return true;
                    sliding(x);
                }
                break;
            case MotionEvent.ACTION_CANCEL:
            case MotionEvent.ACTION_UP:
                if(!isSlinding) return false;
                int width=getContext().getResources().getDisplayMetrics().widthPixels;
                isAnimating=true;
                isSlinding=false;
                startAnimating(width/x&amp;lt;=3,x);
                return true;
            default:
                break;
        }
        return false;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在函数processTouchEvent()中所有要拦截的地方我们都return true,这样子View就不会受到触摸事件了，其余的则应返回false,表示将触摸事件分发给子View去处理。&lt;/p&gt;

&lt;p&gt;其中状态更改的代码比较简单，就不解释了。主要说说其中随着状态更改而进行的几个操作函数:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;startSlide()&lt;/li&gt;
  &lt;li&gt;sliding(x)&lt;/li&gt;
  &lt;li&gt;startAnimating(width/x&amp;lt;=3,x)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;startSlide(),顾名思义，开始滑动，先看看代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void startSlide() {
        preActivity=((MyApplication)getContext().getApplicationContext()).getHelper().getPreActivity();
        if(preActivity==null) return;
        preContentView=(ViewGroup) preActivity.getWindow().findViewById(Window.ID_ANDROID_CONTENT);
        preView= (ViewGroup) preContentView.getChildAt(0);
        preContentView.removeView(preView);
        curContentView=(ViewGroup) mWindow.findViewById(Window.ID_ANDROID_CONTENT);
        curView= (ViewGroup) curContentView.getChildAt(0);
        preView.setX(-preView.getWidth()/3);
        curContentView.addView(preView,0);
        //        if(mShadowView==null){
//            mShadowView=new ShadowView(getContext());
//        }
//        FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(SHADOW_WIDTH, FrameLayout.LayoutParams.MATCH_PARENT);
//        curContentView.addView(mShadowView,1,params);
//        mShadowView.setX(-SHADOW_WIDTH);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在startSlide()中，我们给几个成员变量赋值，并且将preView添加到curContentView中，并赋予其一个初始偏移量。这里要特别注意addView(view,index)中的index参数，index参数越大，代表越靠后绘制。这里添加preView时的index为0，表示最先绘制preView，否则preView会显示在curView的上面，这样就不正确了。注释部分稍后再讲。&lt;/p&gt;

&lt;p&gt;然后看看sliding()方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void sliding(float rawX) {
        if(preActivity==null) return;
        curView.setX(rawX);
        preView.setX(-preView.getWidth()/3+rawX/3);
        //mShadowView.setX(-SHADOW_WIDTH+rawX);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个函数就简单多了，这是随着用户手指的位置动态地更改curView、preView而已。注释稍后讲。&lt;/p&gt;

&lt;p&gt;然后是startAnimating()方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void startAnimating(final boolean isFinishing, float x) {
        int width=getContext().getResources().getDisplayMetrics().widthPixels;
        ValueAnimator animator=ValueAnimator.ofFloat(x,isFinishing?width:0);
        animator.setInterpolator(new DecelerateInterpolator());
        animator.setDuration(200);
        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                sliding((Float) valueAnimator.getAnimatedValue());
            }
        });
        animator.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animator) {

            }

            @Override
            public void onAnimationEnd(Animator animator) {
                doEndWorks(isFinishing);
            }

            @Override
            public void onAnimationCancel(Animator animator) {

            }

            @Override
            public void onAnimationRepeat(Animator animator) {

            }
        });
        animator.start();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当用户松开手指时的位置的x坐标小于屏幕宽度的1/3时，恢复原状，否则将preView完全显示，这里利用ValueAnimator来实现动画。注意在动画完成后我们还要做一些收尾工作，就是方法doEndWorks():&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void doEndWorks(boolean isFinishing) {
        if(preActivity==null) return;
        if(isFinishing){
            //更改当前activity的底view为preView,防止当前activity finish时的白屏闪烁
            BackView view=new BackView(getContext());
            view.cacheView(preView);
            curContentView.addView(view,0);
        }
        //curContentView.removeView(mShadowView);
        if(curContentView==null||preContentView==null) return;
        curContentView.removeView(preView);
        preContentView.addView(preView);
        if(isFinishing){
            ((Activity)getContext()).finish();
            ((Activity)getContext()).overridePendingTransition(0,0);
        }
        isAnimating=false;
        isSlinding=false;
        isIdle=true;
        preView=null;
        curView=null;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;收尾工作中我们将状态修正，该移除的View移除，该添加的View添加。若preView完全显示，就finish当前activity,注意还要利用&lt;code class=&quot;highlighter-rouge&quot;&gt;((Activity)getContext()).overridePendingTransition(0,0)&lt;/code&gt;取消默认的activity更换动画，这样才能实现暗度陈仓的目的。你应该已经看到了这里还有一个BackView，这个BackView其实就是preView的一个副本，我们将BackView添加到curContentView的最底部，覆盖那个白色底部，否则动画完成后会有一个白屏闪烁现象。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//用于防止白屏闪烁
class BackView extends View{

    private View mView;
    public BackView(Context context) {
        super(context);
    }

    public void cacheView(View view){
        mView=view;
        invalidate();
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if(mView!=null){
            mView.draw(canvas);
            mView=null;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样实现的效果就是如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/withouwshadowview.gif&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你应该注意要这个和第一个demo显示的不太一样，因为这里没有阴影效果，体现不出层次感，不够美观，那么接下来我们只需要在添加一点点代码就可以添加这样的一个阴影效果.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ShadowView extends View{

    private Drawable mDrawable;

    public ShadowView(Context context) {
        super(context);
        int[] colors=new int[]{0x00000000, 0x17000000, 0x43000000};
        mDrawable=new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT,colors);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        mDrawable.setBounds(0,0,getMeasuredWidth(),getMeasuredHeight());
        mDrawable.draw(canvas);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个就是要绘制上去的阴影效果，很简单，将前面几个方法中注释的代码部分还原即可。&lt;/p&gt;

&lt;p&gt;这样，就完成了我们所有的代码~~~&lt;/p&gt;

&lt;p&gt;喜欢的话，去给&lt;a href=&quot;https://github.com/XBeats/and_swipeback&quot;&gt;原项目&lt;/a&gt;start吧，当然如果你能给我的文章一个喜欢话我会更开心的~&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/10/15/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%BB%91%E5%8A%A8%E8%BF%94%E5%9B%9ESwipeBackActivity.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/10/15/%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E9%AB%98%E4%BB%BF%E5%BE%AE%E4%BF%A1%E7%9A%84%E6%BB%91%E5%8A%A8%E8%BF%94%E5%9B%9ESwipeBackActivity.html</guid>
        
        
      </item>
    
      <item>
        <title>使用Android Studio 进行NDK开发基础</title>
        <description>&lt;h2 id=&quot;ndk&quot;&gt;配置NDK环境&lt;/h2&gt;
&lt;p&gt;在SDKManager中下载NDK依赖包以及额外工具，只需要勾选NDK、LLDB、CMAKE：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://developer.android.com/studio/images/projects/ndk-install_2-2_2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装完成后，重启AndroidStudio即可自动配置好NDK开发环境。&lt;/p&gt;

&lt;h2 id=&quot;jni&quot;&gt;JNI调用&lt;/h2&gt;

&lt;h3 id=&quot;native&quot;&gt;定义本地Native方法&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class HelloJNI {
    
    public native String getStringFromC();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;此时getStringFromC()方法会报错，这是由于找不到这个方法，无视之，直接build project。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;生成头文件&lt;/h3&gt;

&lt;p&gt;build成功后进入app/build/intermediates/classes/debug目录下，使用命令行javah生成HelloJNI中的native方法对应的头文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javah -jni me.mrrobot97.hellojni.HelloJNI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;注意包名以及类名都要正确，成功运行后在debug目录下就会生成一个头文件&lt;code class=&quot;highlighter-rouge&quot;&gt;me_mrrobot97_hellojni_HelloJNI.h&lt;/code&gt;，我们将这个头文件拷贝至AndroidStudio的JNI目录下，没有这个目录就手动创建一个，然后根据这个头文件创建对应的C文件，同样放置于JNI目录下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &quot;me_mrrobot97_hellojni_HelloJNI.h&quot;

JNIEXPORT jstring JNICALL Java_me_mrrobot97_hellojni_HelloJNI_getStringFromC
  (JNIEnv * env, jobject obj)
  {
        return (*env)-&amp;gt;NewStringUTF(env, &quot;Hello JNI!&quot;);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gradle&quot;&gt;修改gradle&lt;/h3&gt;
&lt;p&gt;然后修改module级别的build.gradle文件，在defaultConfig中加入如下配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndk{
            moduleName &quot;hellojni&quot;
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这里的moduleName就是我们要生成的.so文件的名字。修改gradle.properties,加入如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android.useDeprecatedNdk=true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就可以build了，build后会在app/build/intermediates/ndk/目录下生成对应的.so文件。有了.so文件我们就不需要JNI目录下的C文件了，直接在HelloJNI类中加入:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static {
        System.loadLibrary(&quot;hellojni&quot;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;就可以使用我们定义的native方法了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        HelloJNI helloJNI=new HelloJNI();
        Log.d(&quot;yjw&quot;,helloJNI.getStringFromC());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行项目，查看log:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10-10 05:53:43.958 1811-1811/? D/yjw: Hello JNI!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;证实我们已经成功调用了.so文件来实现native方法调用了！&lt;/p&gt;

&lt;p&gt;上面的方法是针对只有源C文件而无.so文件的使用步骤，如果我们有现成的.so文件，直接调用System.loadLibrary即可。&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/10/10/%E4%BD%BF%E7%94%A8Android-Studio-%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/10/10/%E4%BD%BF%E7%94%A8Android-Studio-%E8%BF%9B%E8%A1%8CNDK%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80.html</guid>
        
        
      </item>
    
      <item>
        <title>使用ItemTouchHelper实现RecyclerView的拖动排序、滑动删除</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Google为我们提供的RecyclerView真的是非常的好用，高度可定制化，这次我们利用ItemTouchHelper来实现对RecyclerView的拖动排序以及滑动删除。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先看看效果图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/demo.gif&quot; alt=&quot;效果图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;效果还是不错的，如果再结合自定义的ItemAnimator,可以实现很漂亮的花样。&lt;/p&gt;

&lt;p&gt;首先我们要定义一个类实现&lt;code class=&quot;highlighter-rouge&quot;&gt;ItemTouchHelper.Callback&lt;/code&gt;接口，然后实现其中的几个方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.public boolean isLongPressDragEnabled()
2.public boolean isItemViewSwipeEnabled()
3.public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)
4.public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target)
5.public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中isLongPressDragEnable是决定是否可以通过长按Item来对其排序，isItemViewSwipeEnable决定是否可以滑动Item，只需要在需要实现的功能里面返回true即可，这里我们两个都返回true&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public boolean isLongPressDragEnabled() {
        return true;
    }

    @Override
    public boolean isItemViewSwipeEnabled() {
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就是重写onMove和onSwiped方法了，在这两个方法里面我们可以获取需要改变的item的位置，然后我们需要将这些位置通知给我们的Adapter，做法是定义一个接口：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface OnDragListener {

    void onDrag(int from,int to);

    void onDismiss(int pos);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;让MainActivity实现这个接口，然后重写这两个方法，并通知Adapter数据更新:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public void onDrag(int from, int to) {
        Collections.swap(mList,from,to);
        mAdapter.notifyItemMoved(from,to);
    }

    @Override
    public void onDismiss(int pos) {
        mList.remove(pos);
        mAdapter.notifyItemRemoved(pos);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;onMove以及onSwiped方法如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
        int dragFlags=ItemTouchHelper.DOWN|ItemTouchHelper.UP|ItemTouchHelper.LEFT|ItemTouchHelper.RIGHT;
        int swipeFlags=ItemTouchHelper.LEFT|ItemTouchHelper.RIGHT;

        return makeMovementFlags(dragFlags,swipeFlags);
    }

    @Override
    public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
        mListener.onDrag(viewHolder.getAdapterPosition(),target.getAdapterPosition());
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;makeMovementFlags()是用来控制滑动以及拖动的方向的，用法如上所示。&lt;/p&gt;

&lt;p&gt;最后就是在MainActivity中将我们的ItemTouchHelper.Callback与RecyclerView绑定:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ItemTouchHelper.Callback callback=new MyItemTouchHelper(this);
        ItemTouchHelper helper=new ItemTouchHelper(callback);
        helper.attachToRecyclerView(mRecyclerView);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样所有的工作就做完了。
完整的项目源码地址&lt;a href=&quot;https://github.com/mrrobot97/DragableRecyclerView&quot;&gt;在此&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/09/27/%E4%BD%BF%E7%94%A8ItemTouchHelper%E5%AE%9E%E7%8E%B0RecyclerView%E7%9A%84%E6%8B%96%E5%8A%A8%E6%8E%92%E5%BA%8F-%E6%BB%91%E5%8A%A8%E5%88%A0%E9%99%A4.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/09/27/%E4%BD%BF%E7%94%A8ItemTouchHelper%E5%AE%9E%E7%8E%B0RecyclerView%E7%9A%84%E6%8B%96%E5%8A%A8%E6%8E%92%E5%BA%8F-%E6%BB%91%E5%8A%A8%E5%88%A0%E9%99%A4.html</guid>
        
        
      </item>
    
      <item>
        <title>利用二阶贝塞尔曲线绘制动态波浪</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;利用贝塞尔曲线我们可以很好地拟合出各种曲线效果，其中二阶贝塞尔曲线可以用来模拟正弦曲线，及我们的“波浪”效果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先上效果图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/ezgif.com-video-to-gif.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们自定义一个WaveView，在onDraw中绘制我们的波浪，当然我们只能绘制静态的曲线，但是我们可以在onDraw中不断的调用invalidate()来实现模拟一帧帧的动画效果。&lt;/p&gt;

&lt;p&gt;Android中的贝塞尔曲线是利用Path.quadTo(x1,y1,x2,y2)来实现二阶贝塞尔曲线的，其中x1,y1和x2,y2即分别为二阶贝塞尔曲线中的P1和P2，Path的起点即为P0.&lt;/p&gt;

&lt;p&gt;width和height为我们定义的浪宽和浪高，sWidth和sHeight为屏幕的宽和高，我们在每一次onDraw中绘制出多条波浪，然后调用invalidate，并且平移一点x，即可实现动画效果:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class WaveView extends View {
    private Paint mPaint;
    //single wave height and weidth
    private int width,height;
    //screen width,height
    private int sWidth,sHeight;
    private int waveColor= Color.BLUE;
    private Path mPath;
    private int strokeWidth;
    private float x,y;

    private boolean isAnim=false;

    public WaveView(Context context) {
        this(context,null);
    }

    public WaveView(Context context, AttributeSet attrs) {
        this(context, attrs,0);
    }

    public WaveView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    private void init() {
        strokeWidth=ScreenUtils.dp2px(getContext(),4);
        mPaint=new Paint();
        mPaint.setAntiAlias(true);
        mPaint.setColor(waveColor);
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setStrokeWidth(strokeWidth);
        width=ScreenUtils.dp2px(getContext(),50);
        height=ScreenUtils.dp2px(getContext(),40);
        int[] wh=ScreenUtils.getScreenWidthAndHeight(getContext());
        sWidth=wh[0];
        sHeight=wh[1]-ScreenUtils.getStatusBarHeight(getContext());
        mPath=new Path();
        x=0;
        y=sHeight/2;
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        mPath.reset();
        mPath.moveTo(x,y);
        float tmpX=x;
        for(int i=0;tmpX&amp;lt;=sWidth+width;i++){
            if (i%2==0){
                //凸弧
                mPath.quadTo(tmpX+width,y-height/2,tmpX+width*2,y);
            }else{
                //凹弧
                mPath.quadTo(tmpX+width,y+height/2,tmpX+width*2,y);
            }
            canvas.drawPath(mPath,mPaint);
            tmpX+=width*2;
            mPath.moveTo(tmpX,y);
        }
        if (isAnim){
            x-=width/10;
            if (x&amp;lt;=-width*4){
                x+=width*4;
            }
            invalidate();
        }

    }

    public void startAnim(boolean anim){
        isAnim=anim;
        invalidate();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 17 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/09/17/%E5%88%A9%E7%94%A8%E4%BA%8C%E9%98%B6%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E7%BB%98%E5%88%B6%E5%8A%A8%E6%80%81%E6%B3%A2%E6%B5%AA.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/09/17/%E5%88%A9%E7%94%A8%E4%BA%8C%E9%98%B6%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E7%BB%98%E5%88%B6%E5%8A%A8%E6%80%81%E6%B3%A2%E6%B5%AA.html</guid>
        
        
      </item>
    
      <item>
        <title>ViewPager实现无限轮播</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Android自带的ViewGroup有翻页功能，支持用户手势滑动，但是不支持循环滚动，因此我们就在PagerAdapter的基础上为其增加循环滚动的功能就行了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;自定义Adapter继承自PagerAdapter，我们需要重写四个方法:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.public int getCount()
2.public Object instantiateItem(ViewGroup container, int position)
3.public boolean isViewFromObject(View view, Object object)
4.public void finishUpdate(ViewGroup container)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;假如我们有N个item需要循环滚动，那么在getCount中就返回2*N，这样让ViewPager以为我们有2N个page需要滚动，因此在滚动到第N页，即逻辑上的最后一页时，还能继续向后滚动，因为此时ViewPager以为后面还有N个page呢~&lt;/p&gt;

&lt;p&gt;在instantiateItem需要对position进行对N求模处理，毕竟我们实际上只有N个page，然后生成相应的View并添加到container中去：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public Object instantiateItem(ViewGroup container, int position) {
        position%=viewCnt;
        ViewGroup parent= (ViewGroup) mViews.get(position).getParent();
        if (parent!=null){
            parent.removeView(mViews.get(position));
        }
        container.addView(mViews.get(position));
        return mViews.get(position);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;isViewFromObject的写法是固定的:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public boolean isViewFromObject(View view, Object object) {
        return view==object;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后是finnishUpdate()方法，这个方法会在page切换完成之后调用，我们需要在这里实现page的偷偷替换：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public void finishUpdate(ViewGroup container) {
        super.finishUpdate(container);
        int position=mViewPager.getCurrentItem();
        if (position==0){
            //first pager,false to cancel translation
            mViewPager.setCurrentItem(viewCnt,false);
        }else if(position==getCount()-1){
            //last pager
            mViewPager.setCurrentItem(viewCnt-1,false);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;之所以将第1个替换为第N+1个是因为第一个page无法向左滑动，而第N+1个左右滑动都可以，因为它左边是第N个，右面是第N+2个。同理将第2N个替换为第N个，因为第2N个无法向右滑动。&lt;/p&gt;

&lt;p&gt;因为替换的前后是同一个page的内容，并且我们的setCurrentItem()的第二个参数为false,即取消过渡动画，立即切换，因此用户不会感觉到page发生了切换。这样我们通过”暗度陈仓”，就实现了ViewPager的循环滚动。&lt;/p&gt;

&lt;p&gt;理论上我们还应该重写destroyItem()方法，但在我重写并在其中调用container.removeView(mViews.get(position))之后，发现在滚动的过程中会出现白屏现象，也没找到原因，反而注释这段代码之后正常了，知道原因的话请留言告诉我。&lt;/p&gt;

&lt;p&gt;Demo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/Screen%2520Capture%2520on%25202016-09-17%2520at%252015-51-54.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/09/17/ViewPager%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E8%BD%AE%E6%92%AD.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/09/17/ViewPager%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E8%BD%AE%E6%92%AD.html</guid>
        
        
      </item>
    
      <item>
        <title>Android断点续传原理及实现</title>
        <description>&lt;p&gt;原理：利用HttpURLConnection进行从网站上下载文件时，我们可以利用HttpURLConnection的setRequestProperty()方法，对我们要读取的字节部分进行控制，比如:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.Range=0-100代表只读取前100个字节。
2.Range=100-500代表读取从第100个字节开始，读到第500个字节为止。
3.Range=100-则代表从第100个字节开始读取，一直读取到文件末尾结束。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样我们就可以轻松的实现对文件的各部分的读取了，我们只需要在暂停时记录一下已经读取到的位置，在重新开始的时候利用setRequestProperty()方法设置一下我们要读取的字节位置即可。&lt;/p&gt;

&lt;p&gt;这里还有一个问题就是我们应该怎样将读取到的字节流写入文件中，由于File是不支持在指定处写入字节的，因此我们这里要使用RandomAccessFile来进行字节流的写入，RandomAccessFile有一个方法seek(long)，允许我们指定要写入的位置。&lt;/p&gt;

&lt;p&gt;这样两者结合，就能够轻易的实现文件的断点续传了。&lt;/p&gt;

&lt;p&gt;多线程断点续传实现原理相同，只是利用多个线程同时下载，每个线程指定要下载的字节部分，写入到文件的指定部分。故这里只给出了单线程断点续传下载的实现部分：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class SingleDownloadTask{

        private String filePath;
        private int contentLength;
        private int readLength;
        private RandomAccessFile file=null;
         private boolean isPause=false;
        private URL url;

         public boolean isDownloading() {
             return isDownloading;
         }

         private boolean isDownloading=false;

        private Handler mHandler=new Handler();

        public SingleDownloadTask(String urlStr,String filePath) {
            this.filePath=filePath;
            readLength=0;
            contentLength=0;
            try {
                url=new URL(urlStr);
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }

        //download from pos
        public void download(){
            new Thread(new Runnable() {
                @Override
                public void run() {
                    isDownloading=true;
                    HttpURLConnection conn=null;
                    InputStream is=null;
                    BufferedInputStream bis=null;
                    try {
                        file=new RandomAccessFile(filePath,&quot;rw&quot;);
                        file.seek(readLength);
                        conn= (HttpURLConnection) url.openConnection();
                        if(readLength==0){
                            contentLength=conn.getContentLength();
                        }else{
                            conn.setRequestProperty(&quot;Range&quot;,&quot;bytes=&quot;+readLength+&quot;-&quot;);
                        }
                        is=conn.getInputStream();
                        bis=new BufferedInputStream(is);
                        byte[] bytes=new byte[1024];
                        int len=0;
                        while (!isPause&amp;amp;&amp;amp;((len=bis.read(bytes,0,1024)))!=-1){
                            file.write(bytes,0,len);
                            readLength+=len;
                            mHandler.post(new Runnable() {
                                @Override
                                public void run() {
                                    float rate=((float)readLength)/contentLength;
                                    mProgressBar.setProgress((int) (100*rate));
                                    mTextView.setText((int)(100*rate)+&quot;%&quot;);
                                }
                            });
                        }
                        isDownloading=false;
                        if (readLength&amp;gt;=contentLength){
                            mHandler.post(new Runnable() {
                                @Override
                                public void run() {
                                    Toast.makeText(MainActivity.this, &quot;文件下载成功,保存在&quot;+filePath
                                            , Toast.LENGTH_SHORT).show();
                                    mImageView.setImageBitmap(BitmapFactory.decodeFile(filePath));
                                }
                            });
                        }
                        file.close();
                    } catch (MalformedURLException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }finally {
                        if (bis!=null){
                            try {
                                bis.close();
                                if (is!=null){
                                    is.close();
                                }
                                if (conn!=null){
                                    conn.disconnect();
                                }
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }).start();
        }

        public void start(){
            isPause=false;
            download();
        }

        public void pause(){
            isPause=true;
        }

    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mrrobot97/PauseDownload&quot;&gt;完整的Demo地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/2016-09-17_12_09_42.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/09/17/Android%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/09/17/Android%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0.html</guid>
        
        
      </item>
    
      <item>
        <title>从零开始制作图片裁减器</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这篇文章讲的是制作一个比较简单的自定义View—图片裁减器，为了降低难度，我只实现了矩形的裁减。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先看看效果图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ockr1qfi1.bkt.clouddn.com/Screen%2520Capture%2520on%25202016-09-16%2520at%252017-21-09.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在开始码代码之前先想一下我们的裁减器TailorView都需要实现哪些功能：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.打开系统相册，从中选中一张图片交给我们的Activity.
2.将图片加载到一个ImageView上.
3.显示一个矩形裁减框，并且可以放大、缩小、拖动.
4.将图片中在裁减框范围之外的部分加上一个黑色滤镜.
5.获取并生成裁减器框内部分的图片并生成Bitmap.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;好了，然后我们就开始码代码喽~&lt;/p&gt;

&lt;p&gt;首先是打开相册并选择一张图片，这件事我们交个一个Activity：MainActivity，这也是我们的入口Activity。注意由于我们需要取得位于SD卡上的图片文件，故需要再AndroidManifest文件中声明如下权限：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同时由于我的测试机型是Android6.0.1的，故还需要再运行时动态监测权限并申请权限。方便起见，我们打开应用的第一时间就申请权限：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED){
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}
                    ,READ_EXTERNAL_STORAGE_REQUEST_CODE);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这就是在运行时动态申请权限的代码，这里我只申请了READ_EXTERNAL_STROAGE,其他权限同样处理方法。&lt;/p&gt;

&lt;p&gt;那么我们怎样才知道用户是否授予了权限呢？很简单，只需要重写Activity的onRequestPermissionsResult方法即可，然后在里面判断用户是否给予了权限：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if(requestCode==READ_EXTERNAL_STORAGE_REQUEST_CODE&amp;amp;&amp;amp;grantResults.length&amp;gt;0){
            //do something
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意这里的READ_EXTERNAL_STORAGE_REQUEST_CODE和申请权限时的是同一个，都是我们自定义的常量。&lt;/p&gt;

&lt;p&gt;好了，权限的问题我们已经搞定了，接下来就是调用系统相册了，很简单，只需一个Intent即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intent intent = new Intent(Intent.ACTION_PICK,
       android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
startActivityForResult(intent, IMAGE_CODE);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就会自动打开系统相册，并且当你选择了一张图片的时候，就会返回。&lt;/p&gt;

&lt;p&gt;接下来就是获取这张我们选择的图片,这里需要重写onActivityResult方法，因为我们调用系统相册时利用的是startActivityForResult(),故当Activity返回时会调用onActivityResult方法，连同返回的数据。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode==IMAGE_CODE&amp;amp;&amp;amp;resultCode==RESULT_OK&amp;amp;&amp;amp;data!=null){
            Uri selectedImage=data.getData();
            String[] filePathColumn={MediaStore.Images.Media.DATA};
            Cursor cursor=getContentResolver().query(selectedImage,
                    filePathColumn,null,null,null);
            if(cursor!=null){
                cursor.moveToFirst();
                String picturePath=
                	cursor.getString(cursor.getColumnIndex(filePathColumn[0]));
                cursor.close();
                Intent intent=new Intent(this,TailorActivity.class);
                intent.putExtra(&quot;picturePath&quot;,picturePath);
                startActivityForResult(intent,IMAGE_TAILORED);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同样，这里的IMAGE_CODE就是startActivityForResylt中的IMAGE_CODE.这样我们就获取了图片的绝对路径，接下来就是加载这个图片到ImageView中了。这里我新建了一个Activity:TailorActivity,并在其布局里放了一个占据全屏的ImageView，我们将图片路径一并传给Activity:TailorActivity即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intent intent=new Intent(this,TailorActivity.class);
                intent.putExtra(&quot;picturePath&quot;,picturePath);
                startActivityForResult(intent,IMAGE_TAILORED);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在TailorActivity先从Intent中取出路径，并加载图片：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mBitmap= BitmapFactory.decodeFile(imagePath);
        mImageView.setImageBitmap(mBitmap);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下来就是今天的主角：自定义View—-TailorView&lt;/p&gt;

&lt;p&gt;我先说一下这个View的结构：TailorView内部维护四个Point类，每个Point很简单只包含一个坐标x和y,这四个Point对应着我们要在屏幕上绘制的裁减框的四个角。我们每次draw的时候先根据这四个Point的位置画出四条线，就是裁减框的边界，然后绘制四个小的实心圆，当用户拖拽任意个=一个实心圆时，我们的裁剪框做出相应的大小改变。当用户点击裁剪框中间的部分时，裁剪框跟随者用户手指左右平移。&lt;/p&gt;

&lt;p&gt;其中裁剪框放大、缩小、平移的逻辑都是在View的onTouchEvent中实现的。
先看看我们的onDraw:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        //drawLines
        mPaint.setStyle(Paint.Style.STROKE);
        for (int i=0;i&amp;lt;4;i++){
            canvas.drawLine(points[i].getX(),points[i].getY()
                    ,points[(i+1)%4].getX(),points[(i+1)%4].getY(),mPaint);
        }
        mPaint.setStyle(Paint.Style.FILL);
        //draw points
        for (int i=0;i&amp;lt;4;i++){
            canvas.drawCircle(points[i].getX(),points[i].getY(),mRadius,mPaint);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这样很轻松的就绘制除了四个边和四个实心角。&lt;/p&gt;

&lt;p&gt;由于我们的TailorView有一个默认初始大小，因此在xml布局文件中使用的时候都不需要指定宽高了，我们也不用重写onMeasure（）方法了，算是偷了个懒。&lt;/p&gt;

&lt;p&gt;我们要对我们的TailorView做出一些限制：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.四个点的顺序不能乱，因为后面我们还要靠这四个点的顺序来构造一个Rect，这个Rect就是不会被黑色滤镜覆盖的范围。

2.我们的TailorView所能移动的地方存在一个边界，就是ImageView中显示的图片的实际边界。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;四个点的顺序不能乱，那就在onTouchEvent中检测四个点的相对坐标即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//check if points gets collide
    private boolean pointsCross(int x, int y, int selectedIndex) {
        if ((selectedIndex==0&amp;amp;&amp;amp;points[1].x-x&amp;lt;=mTouchSlop)
                ||(selectedIndex==0&amp;amp;&amp;amp;points[3].y-y&amp;lt;=mTouchSlop)) return true;
        if ((selectedIndex==1&amp;amp;&amp;amp;x-points[0].x&amp;lt;=mTouchSlop)
                ||(selectedIndex==1&amp;amp;&amp;amp;points[2].y-y&amp;lt;=mTouchSlop)) return true;
        if ((selectedIndex==2&amp;amp;&amp;amp;y-points[1].y&amp;lt;=mTouchSlop)
                ||(selectedIndex==2&amp;amp;&amp;amp;x-points[3].x&amp;lt;=mTouchSlop)) return true;
        if ((selectedIndex==3&amp;amp;&amp;amp;points[2].x-x&amp;lt;=mTouchSlop)
                ||(selectedIndex==3&amp;amp;&amp;amp;y-points[0].y&amp;lt;=mTouchSlop)) return true;
        return false;

    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看出，我的做法是当相邻两个点的某一方向上的距离小于mTouchSlop时，即视为冲突，就无法再任由用户移动了。&lt;/p&gt;

&lt;p&gt;然后是我自定义了一个Bounds类，也很简单，就是包含x1,x2,y1,y1，即为边界的左上和右下点的坐标,在初始化的时候我们利用ImageView中Bitmp的实际边界，给我们的mBound进行赋值。然后同样在onTouchEvent中进行移动的时候，检测是否和边界冲突，倘若冲突，就停止移动：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean checkOutBounds(int x, int y) {
        return mBounds.x1&amp;lt;=x&amp;amp;&amp;amp;mBounds.x2&amp;gt;=x&amp;amp;&amp;amp;mBounds.y1&amp;lt;=y&amp;amp;&amp;amp;mBounds.y2&amp;gt;=y;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后就是判断点击的点是在裁剪框内部还是在四个边角上：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean inCenter(int x,int y){
        for(int i=0;i&amp;lt;4;i++){
            if (inCircle(x,y,points[i])) return false;
        }
        return mRect.contains(x,y);
    }

    private boolean inCircle(int x,int y,Point p){
        return Math.hypot(x-p.getX(),y-p.getY())&amp;lt;=checkLength;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当用户点击的是边框内部的时候，我们就随用户的移动移动整个裁剪框：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//move the whole rect
    private void moveWhole(int delX,int delY){
        for (int i=0;i&amp;lt;4;i++){
            if (!checkOutBounds(points[i].x+delX,points[i].y+delY)) return;
        }
        for (int i=0;i&amp;lt;4;i++){
            points[i].x+=delX;
            points[i].y+=delY;
        }
        mRect=new Rect(points[0].getX(),points[0].getY(),points[2].getX(),points[2].getY());
        mListener.onRectPositionChange();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当用户点击的是某个边角时，相应的需要改变其相邻的两个Point的x或y：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (shouldMove){
        p.setX(x).setY(y);
        //change the relative two circle&#39;s position
        if (selectedIndex%2==0){
             points[(selectedIndex+1)%4].setY(y);
             points[(selectedIndex+3)%4].setX(x);
        }else{
             points[(selectedIndex+1)%4].setX(x);
             points[(selectedIndex+3)%4].setY(y);
            }
         if (mListener!=null){
             mListener.onRectPositionChange();
             }
            mRect=new Rect(points[0].getX(),points[0].getY(),points[2].getX(),points[2].getY());
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样，裁剪框的逻辑基本就实现了，完整的代码我会放在后面。&lt;/p&gt;

&lt;p&gt;然后是我们的另一个自定义View—FilterView，其功能就是给出了裁剪框以外的部分加上一个黑色滤镜，这个就很好实现了，我们只需要让FilterView充满屏幕，然后绘制一个半透明黑色背景色即可。
直接看onDraw方法吧：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        //draw filter color except the rect consists the four points
        mPaint.setAlpha(alpha);
        canvas.drawRect(0,0,mWidth,mRect.top,mPaint);
        canvas.drawRect(0,mRect.bottom,mWidth,mHeight,mPaint);
        canvas.drawRect(0,mRect.top,mRect.left,mRect.bottom,mPaint);
        canvas.drawRect(mRect.right,mRect.top,mWidth,mRect.bottom,mPaint);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里的alpha我的取值是0xAA。&lt;/p&gt;

&lt;p&gt;这里的mRect就是从TailorView那里取得的Rect，注意我们的TailorView的Rect在不停的改变，因此我们需要定义一个接口Listener对其实现监听：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface RectPositionChangeListener{
        void onRectPositionChange();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后我们给TailorView设置一个Listener，在其内部每当Rect变化时就调用onRectPOsitionChange（）方法即可。&lt;/p&gt;

&lt;p&gt;最后就是我们截取图片的功能了，思路是先利用View的getDrawingCache方法获取屏幕截图，然后再利用Rect的坐标从截图中生成一张新的图片：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//return a screen capture bitmap unscaled
    public static Bitmap getScreenCapture(Activity activity){
        View view=activity.getWindow().getDecorView();
        view.setDrawingCacheEnabled(true);
        view.buildDrawingCache();
        Bitmap bitmap=view.getDrawingCache();
        int []wh=getScreenWidthAndHeight(activity);
        Bitmap scaled=Bitmap.createBitmap(bitmap,0,0,wh[0],wh[1]);
        view.setDrawingCacheEnabled(false);
        view.destroyDrawingCache();
        return scaled;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//this screen bitmap contain the statusBar, remember to minus its height.
        Bitmap screen=ScreenUtils.getScreenCapture(this);
        Rect rect=mTailorView.getRect();
        Bitmap bitmap=Bitmap.createBitmap(screen,rect.left,rect.top+mTailorView.statusBarHeight
                ,rect.right-rect.left,rect.bottom-rect.top);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;注意这个截图是包含状态栏的，故需要对坐标进行一下处理。&lt;/p&gt;

&lt;p&gt;至此，我们的自定义图片裁减器就基本完成了，当然有很多缺点和bug，但作为一个自定义View学习Demo还是足够了。&lt;/p&gt;

&lt;p&gt;文章中都是抽离出了部分代码，可能阅读起来不太容易理解，&lt;a href=&quot;https://github.com/mrrobot97/ImageTailor&quot;&gt;完整的源代码见此&lt;/a&gt;,加上注释理解起来应该好很多。&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/09/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E8%A3%81%E5%87%8F%E5%99%A8.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/09/16/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9C%E5%9B%BE%E7%89%87%E8%A3%81%E5%87%8F%E5%99%A8.html</guid>
        
        
      </item>
    
      <item>
        <title>利用注解+反射实现view的auto bind</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;相信都用过JakeWharton大神的&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot;&gt;ButterKnife&lt;/a&gt;框架，有了ButterKnife我们就可以不用再反复地写繁琐的findViewById()了，ButterKnife内部利用的是注解+编译时生成java字节码实现的，没有利用到反射，故在实际使用时不会对应用的性能产生影响。今天我们就简单的利用注解+反射实现一个简单的view的auto bind，当然只是为了了解一下注解和反射的简单用法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先我们定义一个注解接口：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
public @interface BindView {
    public int id();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;很简单，只有一个id，因为我们为view绑定控件时只需要一个int类型的id即可。&lt;/p&gt;

&lt;p&gt;然后是我们的注解处理类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Binder {
    public static void bind(Object object, View view){
        Field[] fields=object.getClass().getDeclaredFields();
        for (Field field:fields){
            if (field.isAnnotationPresent(BindView.class)){
                BindView bindView=field.getAnnotation(BindView.class);
                if (bindView!=null){
                    field.setAccessible(true);
                    try {
                        field.set(object,view.findViewById(bindView.id()));
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们需要将注解所在的object以及需要绑定到的view作为参数传进去。&lt;/p&gt;

&lt;p&gt;然后就可以使用啦！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MainActivity extends AppCompatActivity {

    @BindView(id=R.id.text_view)
    private TextView mTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Binder.bind(this,this.findViewById(android.R.id.content));
        mTextView.setText(&quot;This is not a hello world&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里我们只需要@BindView(id=…)，然后在setContentView()后调用Binder.bind()即可使用我们的mTextView了。&lt;/p&gt;

&lt;p&gt;当然利用反射是会对应用性能产生影响的，实际使用中我们还是应该使用ButterKnife。&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://mrrobot97.github.io/2016/09/11/%E5%88%A9%E7%94%A8%E6%B3%A8%E8%A7%A3+%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0view%E7%9A%84auto-bind.html</link>
        <guid isPermaLink="true">http://mrrobot97.github.io/2016/09/11/%E5%88%A9%E7%94%A8%E6%B3%A8%E8%A7%A3+%E5%8F%8D%E5%B0%84%E5%AE%9E%E7%8E%B0view%E7%9A%84auto-bind.html</guid>
        
        
      </item>
    
  </channel>
</rss>
